{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","color","href","title","type","id","onClick","togglebtn","toggleMode","htmlFor","TextForm","useState","text","setText","style","heading","value","onChange","event","target","backgroundColor","rows","disabled","length","uppertext","toUpperCase","showAlert","lower","toLowerCase","newText","split","join","document","getElementById","select","navigator","clipBoard","writeText","filter","element","Alert","height","alert","role","word","charAt","slice","capitalize","msg","App","setMode","setcolor","setAlert","message","setTimeout","aboutTExt","body","console","log","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.bb5ec963.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n// import { Link } from \"react-router-dom\";\n// import { Link } from \"react-router-dom\";\n\nexport default function Navbar(props) {\n  return (\n    <nav\n      className={`navbar navbar-expand-lg navbar-${\n        props.mode\n        // (props.mode, props.color)\n      } bg-${props.mode.color} `}\n    >\n      <div className=\"container-fluid\">\n        {/* <a className=\"navbar-brand\" href=\"/\">TextUtlis</a> */}\n        <a className=\"navbar-brand\" href=\"#\">\n          {props.title}\n        </a>\n        <button\n          className=\"navbar-toggler\"\n          type=\"button\"\n          data-bs-toggle=\"collapse\"\n          data-bs-target=\"#navbarSupportedContent\"\n          aria-controls=\"navbarSupportedContent\"\n          aria-expanded=\"false\"\n          aria-label=\"Toggle navigation\"\n        >\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n            <li className=\"nav-item\">\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">\n                Home\n              </a>\n            </li>\n            {/* <li className=\"nav-item\">\n              // {/* <a className=\"nav-link\" href=\"/\">AboutðŸ¤”</a> */}\n            {/* <Link className=\"nav-link active\" to=\"/about\"> */}\n            {/* ðŸ¤” */}\n            {/* {props.aboutTExt} */}\n            {/* </Link> */}\n            {/* </li> */}\n          </ul>\n\n          <div\n            type=\"button \"\n            className={`btn  disabled  btn-${\n              props.color === \"success\" ? \"danger\" : \"success\"\n            } mx-2`}\n            onClick={props.togglebtn}\n          >\n            {/* <button */}\n            {/* // type=\"button\" */}\n            {/* onClick={props.togglebtn} */}\n            {/* // aria-disabled=\"true\" */}\n            {/* // className={`btn btn-success mx-2 disabled`} */}\n            {/* > */}\n            Enable RedMode\n            {/* </button> */}\n          </div>\n\n          {/* // TODO Dark mode button  | */}\n          <div\n            className={`form-check form-switch text-${\n              props.mode === \"light\" ? \"dark\" : \"light\"\n            }`}\n          >\n            <input\n              className=\"form-check-input\"\n              onClick={props.toggleMode}\n              type=\"checkbox\"\n              id=\"flexSwitchCheckDefault\"\n            />\n            <label\n              className=\"form-check-label\"\n              htmlFor=\"flexSwitchCheckDefault\"\n            >\n              Enable DarkMode\n            </label>\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}\n\nNavbar.propTypes = {\n  title: PropTypes.string.isRequired,\n  aboutTExt: PropTypes.string,\n};\n","import React, { useState } from \"react\";\n\nexport default function TextForm(props) {\n  const handleupClick = () => {\n    // console.log(\"upperCase button clicked\" + text);\n    let uppertext = text.toUpperCase();\n    props.showAlert(\"Converted To Upper Case\", \"success\");\n    setText(uppertext);\n  };\n\n  const handleDownClick = () => {\n    let lower = text.toLowerCase();\n    props.showAlert(\"Converted To Lower Case\", \"success\");\n    setText(lower);\n  };\n\n  const handleClear = () => {\n    let clear = \"\";\n    props.showAlert(\"Text Area clear\", \"danger  \");\n    setText(clear);\n  };\n\n  const handleonchnge = (event) => {\n    // console.log(\"button clicked\");\n    setText(event.target.value);\n  };\n\n  const handleCopy = () => {\n    var text = document.getElementById(\"myBox\");\n    text.select();\n    navigator.clipBoard.writeText(text.value);\n    props.showAlert(\"Copied to Clipboard\", \"success\");\n  };\n\n  const handleSpace = () => {\n    let newText = text.split(/[ ]+/);\n    setText(newText.join(\" \"));\n    props.showAlert(\"Space Removed\", \"success\");\n  };\n\n  const [text, setText] = useState(\"enter text here..\");\n  return (\n    <>\n      <div>\n        <div\n          className=\"container mb-3\"\n          style={{\n            color: props.mode === \"dark\" ? \"white\" : \"black\",\n            // color: props.color === \"red\" ? \"white\" : \"red\",\n          }}\n        >\n          <h4>{props.heading}</h4>\n          <textarea\n            className=\"form-control\"\n            value={text}\n            onChange={handleonchnge}\n            style={{\n              backgroundColor: props.mode === \"dark\" ? \"grey\" : \"white\",\n              color: props.mode === \"dark\" ? \"white\" : \"black\",\n            }}\n            id=\"myBox\"\n            rows=\"7\"\n          ></textarea>\n        </div>\n        <button\n          disabled={text.length === 0}\n          className=\"btn btn-primary mx-2 my-2\"\n          onClick={handleupClick}\n        >\n          convert to upperCase\n        </button>\n        <button\n          disabled={text.length === 0}\n          className=\"btn btn-primary mx-2 my-2\"\n          onClick={handleDownClick}\n        >\n          convert to LowerCase\n        </button>\n        <button\n          disabled={text.length === 0}\n          className=\"btn btn-primary mx-2 my-2\"\n          onClick={handleClear}\n        >\n          clear text\n        </button>\n        <button\n          disabled={text.length === 0}\n          className=\"btn btn-primary mx-2 my-2\"\n          onClick={handleSpace}\n        >\n          Remove Extra Space\n        </button>\n        <button\n          disabled\n          className=\"btn btn-primary mx-2 my-2\"\n          onClick={handleCopy}\n        >\n          copytext\n        </button>\n      </div>\n\n      <div\n        className=\"container\"\n        style={{\n          color: props.mode === \"dark\" ? \"white\" : \"black\",\n        }}\n      >\n        <h5>Your Text Summary</h5>\n\n        <p>\n          {\n            text.split(\" \").filter((element) => {\n              return element.length !== 0;\n            }).length\n          }{\" \"}\n          word and {text.length} character\n          {/* {text.split(\" \").join().length} word and {text.length} character */}\n        </p>\n        <p> {0.008 * text.split(\" \").length}Minute To Read</p>\n        {/* <p> {0.008 * text.split(\" \").join().length}Minute To Read</p> */}\n        <h6>Preview</h6>\n        <p>{text.length > 0 ? text : \"Nothing to Convert..ðŸ˜…ðŸ˜…\"}</p>\n      </div>\n    </>\n  );\n}\n","import React from \"react\";\n\nfunction Alert(props) {\n  const capitalize = (word) => {\n    const lower = word.toLowerCase();\n    return lower.charAt(0).toUpperCase() + lower.slice(1);\n  };\n  return (\n    <div style={{ height: \"50px\" }}>\n      {props.alert && (\n        <div\n          className={`alert alert-${props.alert.type} alert-dismissible fade show`}\n          role=\"alert\"\n        >\n          <strong>{capitalize(props.alert.type)}</strong> : {props.alert.msg}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default Alert;\n","// import logo from './logo.svg';\nimport \"./App.css\";\n// import About from \"./components/About\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport React, { useState } from \"react\";\nimport Alert from \"./components/Alert\";\n// import { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nfunction App() {\n  //\n\n  const [mode, setMode] = useState(\"light\");\n  const [color, setcolor] = useState(\"success\");\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  };\n\n  //TODO bug in this part.....\n\n  function togglebtn() {\n    if (color === \"success\") {\n      setcolor(\"red\");\n      // setcolor(\"#EB4D4B\");\n      document.body.style.backgroundColor = \"red\";\n      showAlert(\"red mode has been enabled\", \"danger\");\n      console.log(\"not working\");\n    } else {\n      setcolor(\"success\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"white mode has been enabled\", \"success\");\n      console.log(\"working\");\n    }\n  }\n\n  //TODO ........\n\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"grey\";\n      showAlert(\"dark mode has been enabled\", \"success\");\n      console.log(\"if part\");\n    } else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light mode has been enabled\", \"success\");\n      console.log(\"else part\");\n    }\n  };\n  return (\n    <>\n      {/* <Navbar title=\"TextUtils\" aboutTExt=\" About\" /> */}\n      {/* <Router> */}\n      <Navbar\n        title=\"TextChanger\"\n        // title=\"princebsdk\"\n        aboutTExt=\" About\"\n        mode={mode}\n        color={color}\n        toggleMode={toggleMode}\n        togglebtn={togglebtn}\n      />\n      <Alert alert={alert} />\n      {/* <Navbar /> */}\n      <div className=\"container my-3\">\n        {/* <Switch>\n            <Route exact path=\"/about\">\n              <About mode={mode} />\n            </Route> */}\n\n        {/* <Route exact path=\"/\"> */}\n        <TextForm\n          showAlert={showAlert}\n          heading=\"Enter The Text To Analyze\"\n          mode={mode}\n          // color={color}\n          // togglebtn={togglebtn}\n        />\n        {/* </Route> */}\n        {/* </Switch> */}\n\n        {/* <About /> */}\n      </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n  \n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}